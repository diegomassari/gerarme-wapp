{"ast":null,"code":"var _jsxFileName = \"/Users/massari/Code/gerarme-wapp/src/components/configs/FormLogo.js\";\nimport React from 'react';\nimport { getUser } from \"../../services/auth\";\nimport api from \"../../services/api\";\nimport ReactCrop from \"react-image-crop\";\nimport 'react-image-crop/dist/ReactCrop.css';\n\nclass FormLogo extends React.Component {\n  constructor() {\n    super();\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      const _this$state = this.state,\n            base64image = _this$state.base64image,\n            userId = _this$state.userId;\n\n      if (!base64image || !userId) {\n        this.setState({\n          error: \"Suba sua imagem de Logo para salvar\"\n        });\n      } else {\n        try {\n          const response = await api.post(\"/api/user/logobase64\", {\n            base64image,\n            userId\n          });\n\n          if (response.status === 200) {\n            console.log('success: formLogo');\n            console.log(response.data);\n          } else {\n            console.log('error on saving');\n            console.log(response);\n          }\n        } catch (err) {\n          this.setState({\n            error: \"Houve um problema com o login, verifique suas credenciais. T.T\"\n          });\n        }\n      }\n    };\n\n    this.onSelectFile = e => {\n      if (e.target.files && e.target.files.length > 0) {\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", () => this.setState({\n          src: reader.result\n        }));\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    };\n\n    this.onImageLoaded = image => {\n      this.imageRef = image;\n    };\n\n    this.onCropComplete = crop => {\n      this.makeClientCrop(crop);\n    };\n\n    this.onCropChange = (crop, percentCrop) => {\n      // You could also use percentCrop:\n      //this.setState({ crop: percentCrop });\n      this.setState({\n        crop\n      });\n    };\n\n    this.state = {\n      logoFile: null,\n      userId: null,\n      src: null,\n      base64image: null,\n      crop: {\n        unit: \"%\",\n        width: 100,\n        aspect: 16 / 7\n      }\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      userId: getUser()\n    });\n    const response = api.get(\"/api/user/me\", {});\n\n    if (response.status === 200) {\n      console.log('componentDidMount: formLogo');\n      this.setState({\n        logoFile: response.data.logo\n      });\n    } else {\n      console.log('error on saving');\n      console.log(response);\n    }\n  }\n\n  handleChange(event) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value,\n          type = _event$target.type,\n          checked = _event$target.checked;\n    type === \"checkbox\" ? this.setState({\n      [name]: checked\n    }) : this.setState({\n      [name]: value\n    });\n  }\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const logoFile = await this.getCroppedImg(this.imageRef, crop, \"newFile.png\");\n      this.setState({\n        logoFile\n      });\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement(\"canvas\");\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    return new Promise((resolve, reject) => {\n      const base64image = canvas.toDataURL('image/jpeg');\n      this.setState({\n        base64image: base64image\n      });\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'))\n          console.error(\"Canvas is empty\");\n          return;\n        }\n\n        blob.name = fileName;\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, \"image/png\");\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          crop = _this$state2.crop,\n          logoFile = _this$state2.logoFile,\n          src = _this$state2.src;\n    console.log(logoFile);\n    return React.createElement(\"div\", {\n      className: \"panel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"panel-heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"panel-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"Logo\")), React.createElement(\"div\", {\n      className: \"panel-body container-fluid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.onSelectFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"CropComponent\",\n      style: {\n        width: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, src && React.createElement(ReactCrop, {\n      src: src,\n      crop: crop,\n      onImageLoaded: this.onImageLoaded,\n      onComplete: this.onCropComplete,\n      onChange: this.onCropChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), logoFile && React.createElement(\"img\", {\n      alt: \"Crop\",\n      name: \"logoFile\",\n      id: \"logoFile\",\n      src: logoFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }))), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-success mt-20\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Salvar\"))));\n  }\n\n}\n\nexport default FormLogo;","map":{"version":3,"sources":["/Users/massari/Code/gerarme-wapp/src/components/configs/FormLogo.js"],"names":["React","getUser","api","ReactCrop","FormLogo","Component","constructor","handleSubmit","e","preventDefault","state","base64image","userId","setState","error","response","post","status","console","log","data","err","onSelectFile","target","files","length","reader","FileReader","addEventListener","src","result","readAsDataURL","onImageLoaded","image","imageRef","onCropComplete","crop","makeClientCrop","onCropChange","percentCrop","logoFile","unit","width","aspect","handleChange","bind","componentDidMount","get","logo","event","name","value","type","checked","height","getCroppedImg","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toDataURL","toBlob","blob","window","URL","revokeObjectURL","fileUrl","createObjectURL","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { getUser } from \"../../services/auth\"\nimport api from \"../../services/api\"\nimport ReactCrop from \"react-image-crop\"\nimport 'react-image-crop/dist/ReactCrop.css'\n\nclass FormLogo extends React.Component {\n    constructor(){\n        super()\n        this.state = {\n            logoFile: null,\n            userId: null,\n            src: null,\n            base64image: null,\n            crop: {\n                unit: \"%\",\n                width: 100,\n                aspect: 16 / 7\n            }\n        }\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    componentDidMount(){\n        this.setState({userId: getUser()})\n\n        const response = api.get(\"/api/user/me\", {  })\n\n        if(response.status === 200){\n            console.log('componentDidMount: formLogo')\n            this.setState({logoFile: response.data.logo})\n        } else {\n            console.log('error on saving')\n            console.log(response)\n        }\n    }\n\n    handleChange(event) {\n        const {name, value, type, checked} = event.target\n        type === \"checkbox\" ? this.setState({ [name]: checked }) : this.setState({ [name]: value })\n    }\n\n    handleSubmit = async e => {\n\n        e.preventDefault();\n        const { base64image, userId } = this.state\n\n        if (!base64image || !userId) {\n            this.setState({ error: \"Suba sua imagem de Logo para salvar\" })\n        } else {\n            try {\n                const response = await api.post(\"/api/user/logobase64\", { base64image, userId })\n\n                if(response.status === 200){\n                    console.log('success: formLogo')\n                    console.log(response.data)\n                } else {\n                    console.log('error on saving')\n                    console.log(response)\n                }\n\n            } catch (err) {\n                this.setState({\n                error:\n                    \"Houve um problema com o login, verifique suas credenciais. T.T\"\n                })\n            }\n        }\n\n    }\n\n    onSelectFile = e => {\n        if (e.target.files && e.target.files.length > 0) {\n          const reader = new FileReader();\n          reader.addEventListener(\"load\", () =>\n            this.setState({ src: reader.result })\n          );\n          reader.readAsDataURL(e.target.files[0]);\n        }\n      };\n    \n      // If you setState the crop in here you should return false.\n      onImageLoaded = image => {\n        this.imageRef = image;\n      };\n    \n      onCropComplete = crop => {\n        this.makeClientCrop(crop);\n      };\n    \n      onCropChange = (crop, percentCrop) => {\n        // You could also use percentCrop:\n        //this.setState({ crop: percentCrop });\n        this.setState({ crop });\n      };\n    \n      async makeClientCrop(crop) {\n        if (this.imageRef && crop.width && crop.height) {\n          const logoFile = await this.getCroppedImg(\n            this.imageRef,\n            crop,\n            \"newFile.png\"\n          );\n          this.setState({ logoFile })\n        }\n      }\n    \n      getCroppedImg(image, crop, fileName) {\n        const canvas = document.createElement(\"canvas\")\n        const scaleX = image.naturalWidth / image.width\n        const scaleY = image.naturalHeight / image.height\n        canvas.width = crop.width\n        canvas.height = crop.height\n        const ctx = canvas.getContext(\"2d\")\n    \n        ctx.drawImage(\n          image,\n          crop.x * scaleX,\n          crop.y * scaleY,\n          crop.width * scaleX,\n          crop.height * scaleY,\n          0,\n          0,\n          crop.width,\n          crop.height\n        )\n    \n        return new Promise((resolve, reject) => {\n\n          const base64image = canvas.toDataURL('image/jpeg')\n\n          this.setState({base64image: base64image}) \n          \n          canvas.toBlob(blob => {\n            if (!blob) {\n              //reject(new Error('Canvas is empty'))\n              console.error(\"Canvas is empty\")\n              return\n            }\n            blob.name = fileName\n            window.URL.revokeObjectURL(this.fileUrl)\n            this.fileUrl = window.URL.createObjectURL(blob)\n            resolve(this.fileUrl)\n          }, \"image/png\")\n\n        })\n      }\n\n    render(){\n        const { crop, logoFile, src } = this.state;\n\n        console.log(logoFile)\n\n        return (\n            <div className=\"panel\">\n                <div className=\"panel-heading\">\n                    <h3 className=\"panel-title\">Logo</h3>\n                </div>\n                <div className=\"panel-body container-fluid\">\n                    <form onSubmit={this.handleSubmit}>    \n                        <input type=\"file\" onChange={this.onSelectFile} />\n                        <div className=\"row\">\n                            <div className=\"CropComponent\" style={{width: \"100%\"}}>\n                                {src && (\n                                    <ReactCrop\n                                        src={src}\n                                        crop={crop}\n                                        onImageLoaded={this.onImageLoaded}\n                                        onComplete={this.onCropComplete}\n                                        onChange={this.onCropChange}\n                                    />\n                                )}\n                                <br/>\n                                {logoFile && ( <img alt=\"Crop\" name=\"logoFile\" id=\"logoFile\" src={logoFile} /> )}\n                            </div>\n                        </div>\n                        <button type=\"submit\" className=\"btn btn-success mt-20\">Salvar</button>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default FormLogo"]},"metadata":{},"sourceType":"module"}