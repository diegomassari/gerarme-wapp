{"ast":null,"code":"var _jsxFileName = \"/Users/massari/Code/gerarme-wapp/src/components/configs/FormLogo.js\";\nimport React from 'react';\nimport { getUser } from \"../../services/auth\";\nimport api from \"../../services/api\";\n\nclass FormLogo extends React.Component {\n  constructor() {\n    super();\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      const _this$state = this.state,\n            logoFile = _this$state.logoFile,\n            userId = _this$state.userId;\n      console.log(this.state);\n\n      if (!logoFile || !userId) {\n        this.setState({\n          error: \"Suba sua imagem de Logo para salvar\"\n        });\n      } else {\n        try {\n          const response = await api.post(\"/auth//api/users/logo\", {\n            logoFile,\n            userId\n          });\n          console.log(response); //login(responseLogin.data.access_token)\n          //this.props.history.push(\"/\")\n        } catch (err) {\n          this.setState({\n            error: \"Houve um problema com o login, verifique suas credenciais. T.T\"\n          });\n        }\n      }\n    };\n\n    this.onSelectFile = e => {\n      if (e.target.files && e.target.files.length > 0) {\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", () => this.setState({\n          src: reader.result\n        }));\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    };\n\n    this.onImageLoaded = image => {\n      this.imageRef = image;\n    };\n\n    this.onCropComplete = crop => {\n      this.makeClientCrop(crop);\n    };\n\n    this.onCropChange = (crop, percentCrop) => {\n      // You could also use percentCrop:\n      this.setState({\n        crop: percentCrop\n      });\n      this.setState({\n        crop\n      });\n    };\n\n    this.state = {\n      logoFile: null,\n      userId: null\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      userId: getUser()\n    });\n  }\n\n  handleChange(event) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value,\n          type = _event$target.type,\n          checked = _event$target.checked;\n    type === \"checkbox\" ? this.setState({\n      [name]: checked\n    }) : this.setState({\n      [name]: value\n    });\n  }\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(this.imageRef, crop, \"newFile.png\");\n      this.setState({\n        croppedImageUrl\n      });\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement(\"canvas\");\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error(\"Canvas is empty\");\n          return;\n        }\n\n        blob.name = fileName;\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, \"image/png\");\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"panel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"panel-heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"panel-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Logo\")), React.createElement(\"div\", {\n      className: \"panel-body container-fluid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.onSelectFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), src && React.createElement(ReactCrop, {\n      src: src,\n      crop: crop,\n      onImageLoaded: this.onImageLoaded,\n      onComplete: this.onCropComplete,\n      onChange: this.onCropChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), croppedImageUrl && React.createElement(\"img\", {\n      alt: \"Crop\",\n      name: \"logoFile\",\n      id: \"logoFile\",\n      style: {\n        maxWidth: \"100%\"\n      },\n      src: croppedImageUrl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-success mt-20\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Salvar\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, this.state.logoImage)));\n  }\n\n}\n\nexport default FormLogo;","map":{"version":3,"sources":["/Users/massari/Code/gerarme-wapp/src/components/configs/FormLogo.js"],"names":["React","getUser","api","FormLogo","Component","constructor","handleSubmit","e","preventDefault","state","logoFile","userId","console","log","setState","error","response","post","err","onSelectFile","target","files","length","reader","FileReader","addEventListener","src","result","readAsDataURL","onImageLoaded","image","imageRef","onCropComplete","crop","makeClientCrop","onCropChange","percentCrop","handleChange","bind","componentDidMount","event","name","value","type","checked","width","height","croppedImageUrl","getCroppedImg","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","window","URL","revokeObjectURL","fileUrl","createObjectURL","render","maxWidth","logoImage"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { getUser } from \"../../services/auth\"\nimport api from \"../../services/api\"\n\nclass FormLogo extends React.Component {\n    constructor(){\n        super()\n        this.state = {\n            logoFile: null,\n            userId: null\n        }\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    componentDidMount(){\n        this.setState({userId: getUser()})\n    }\n\n    handleChange(event) {\n        const {name, value, type, checked} = event.target\n        type === \"checkbox\" ? this.setState({ [name]: checked }) : this.setState({ [name]: value })\n    }\n\n    handleSubmit = async e => {\n\n        e.preventDefault();\n        const { logoFile, userId } = this.state\n\n        console.log(this.state)\n\n        if (!logoFile || !userId) {\n            this.setState({ error: \"Suba sua imagem de Logo para salvar\" })\n        } else {\n            try {\n                const response = await api.post(\"/auth//api/users/logo\", { logoFile, userId })\n\n                console.log(response)\n                \n                //login(responseLogin.data.access_token)\n                //this.props.history.push(\"/\")\n\n            } catch (err) {\n                this.setState({\n                error:\n                    \"Houve um problema com o login, verifique suas credenciais. T.T\"\n                })\n            }\n        }\n\n    }\n\n    onSelectFile = e => {\n        if (e.target.files && e.target.files.length > 0) {\n          const reader = new FileReader();\n          reader.addEventListener(\"load\", () =>\n            this.setState({ src: reader.result })\n          );\n          reader.readAsDataURL(e.target.files[0]);\n        }\n      };\n    \n      // If you setState the crop in here you should return false.\n      onImageLoaded = image => {\n        this.imageRef = image;\n      };\n    \n      onCropComplete = crop => {\n        this.makeClientCrop(crop);\n      };\n    \n      onCropChange = (crop, percentCrop) => {\n        // You could also use percentCrop:\n        this.setState({ crop: percentCrop });\n        this.setState({ crop });\n      };\n    \n      async makeClientCrop(crop) {\n        if (this.imageRef && crop.width && crop.height) {\n          const croppedImageUrl = await this.getCroppedImg(\n            this.imageRef,\n            crop,\n            \"newFile.png\"\n          );\n          this.setState({ croppedImageUrl });\n        }\n      }\n    \n      getCroppedImg(image, crop, fileName) {\n        const canvas = document.createElement(\"canvas\");\n        const scaleX = image.naturalWidth / image.width;\n        const scaleY = image.naturalHeight / image.height;\n        canvas.width = crop.width;\n        canvas.height = crop.height;\n        const ctx = canvas.getContext(\"2d\");\n    \n        ctx.drawImage(\n          image,\n          crop.x * scaleX,\n          crop.y * scaleY,\n          crop.width * scaleX,\n          crop.height * scaleY,\n          0,\n          0,\n          crop.width,\n          crop.height\n        );\n    \n        return new Promise((resolve, reject) => {\n          canvas.toBlob(blob => {\n            if (!blob) {\n              //reject(new Error('Canvas is empty'));\n              console.error(\"Canvas is empty\");\n              return;\n            }\n            blob.name = fileName;\n            window.URL.revokeObjectURL(this.fileUrl);\n            this.fileUrl = window.URL.createObjectURL(blob);\n            resolve(this.fileUrl);\n          }, \"image/png\");\n        });\n      }\n\n    render(){\n        return (\n            <div className=\"panel\">\n                <div className=\"panel-heading\">\n                    <h3 className=\"panel-title\">Logo</h3>\n                </div>\n                <div className=\"panel-body container-fluid\">\n                    <form onSubmit={this.handleSubmit}>    \n                        <input type=\"file\" onChange={this.onSelectFile} />\n                        {src && (\n                        <ReactCrop\n                            src={src}\n                            crop={crop}\n                            onImageLoaded={this.onImageLoaded}\n                            onComplete={this.onCropComplete}\n                            onChange={this.onCropChange}\n                        />\n                        )}\n                        <br/>\n                        {croppedImageUrl && (\n                        <img alt=\"Crop\" name=\"logoFile\" id=\"logoFile\" style={{ maxWidth: \"100%\" }} src={croppedImageUrl} />\n                        )}\n                        <button type=\"submit\" className=\"btn btn-success mt-20\">Salvar</button>\n                    </form>\n                    <p>{this.state.logoImage}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default FormLogo"]},"metadata":{},"sourceType":"module"}