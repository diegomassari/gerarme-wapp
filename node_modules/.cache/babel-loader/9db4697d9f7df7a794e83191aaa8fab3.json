{"ast":null,"code":"var _jsxFileName = \"/Users/massari/Code/gerarme-wapp/src/components/configs/FormLogoImageCrop.js\";\nimport React from 'react';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport ReactCrop from \"react-image-crop\";\n\nclass FormLogoImageCrop extends React.Component {\n  constructor() {\n    super();\n\n    this.onSelectFile = e => {\n      if (e.target.files && e.target.files.length > 0) {\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", () => this.setState({\n          src: reader.result\n        }));\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    };\n\n    this.onImageLoaded = image => {\n      this.imageRef = image;\n    };\n\n    this.onCropComplete = crop => {\n      this.makeClientCrop(crop);\n    };\n\n    this.onCropChange = (crop, percentCrop) => {\n      // You could also use percentCrop:\n      this.setState({\n        crop: percentCrop\n      });\n      this.setState({\n        crop\n      });\n    };\n\n    this.state = {\n      croppedImageUrl: null,\n      src: null,\n      crop: {\n        unit: \"%\",\n        width: 100,\n        aspect: 16 / 7\n      }\n    };\n  }\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(this.imageRef, crop, \"newFile.png\");\n      this.setState({\n        croppedImageUrl\n      });\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement(\"canvas\");\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error(\"Canvas is empty\");\n          return;\n        }\n\n        blob.name = fileName;\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, \"image/png\");\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          crop = _this$state.crop,\n          croppedImageUrl = _this$state.croppedImageUrl,\n          src = _this$state.src;\n    return React.createElement(\"div\", {\n      className: \"CropComponent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.onSelectFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    })), src && React.createElement(ReactCrop, {\n      src: src,\n      crop: crop,\n      onImageLoaded: this.onImageLoaded,\n      onComplete: this.onCropComplete,\n      onChange: this.onCropChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), croppedImageUrl && React.createElement(\"img\", {\n      alt: \"Crop\",\n      style: {\n        maxWidth: \"100%\"\n      },\n      src: croppedImageUrl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default FormLogoImageCrop;","map":{"version":3,"sources":["/Users/massari/Code/gerarme-wapp/src/components/configs/FormLogoImageCrop.js"],"names":["React","ReactCrop","FormLogoImageCrop","Component","constructor","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","setState","src","result","readAsDataURL","onImageLoaded","image","imageRef","onCropComplete","crop","makeClientCrop","onCropChange","percentCrop","state","croppedImageUrl","unit","width","aspect","height","getCroppedImg","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","console","error","name","window","URL","revokeObjectURL","fileUrl","createObjectURL","render","maxWidth"],"mappings":"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","sourcesContent":["import React from 'react'\nimport 'react-image-crop/dist/ReactCrop.css'\nimport ReactCrop from \"react-image-crop\"\n\nclass FormLogoImageCrop extends React.Component {\n\n    constructor(){\n        super()\n        this.state = {\n            croppedImageUrl: null,\n            src: null,\n            crop: {\n                unit: \"%\",\n                width: 100,\n                aspect: 16 / 7\n            }\n        }\n    }\n\n    onSelectFile = e => {\n        if (e.target.files && e.target.files.length > 0) {\n          const reader = new FileReader();\n          reader.addEventListener(\"load\", () =>\n            this.setState({ src: reader.result })\n          );\n          reader.readAsDataURL(e.target.files[0]);\n        }\n      };\n    \n      // If you setState the crop in here you should return false.\n      onImageLoaded = image => {\n        this.imageRef = image;\n      };\n    \n      onCropComplete = crop => {\n        this.makeClientCrop(crop);\n      };\n    \n      onCropChange = (crop, percentCrop) => {\n        // You could also use percentCrop:\n        this.setState({ crop: percentCrop });\n        this.setState({ crop });\n      };\n    \n      async makeClientCrop(crop) {\n        if (this.imageRef && crop.width && crop.height) {\n          const croppedImageUrl = await this.getCroppedImg(\n            this.imageRef,\n            crop,\n            \"newFile.png\"\n          );\n          this.setState({ croppedImageUrl });\n        }\n      }\n    \n      getCroppedImg(image, crop, fileName) {\n        const canvas = document.createElement(\"canvas\");\n        const scaleX = image.naturalWidth / image.width;\n        const scaleY = image.naturalHeight / image.height;\n        canvas.width = crop.width;\n        canvas.height = crop.height;\n        const ctx = canvas.getContext(\"2d\");\n    \n        ctx.drawImage(\n          image,\n          crop.x * scaleX,\n          crop.y * scaleY,\n          crop.width * scaleX,\n          crop.height * scaleY,\n          0,\n          0,\n          crop.width,\n          crop.height\n        );\n    \n        return new Promise((resolve, reject) => {\n          canvas.toBlob(blob => {\n            if (!blob) {\n              //reject(new Error('Canvas is empty'));\n              console.error(\"Canvas is empty\");\n              return;\n            }\n            blob.name = fileName;\n            window.URL.revokeObjectURL(this.fileUrl);\n            this.fileUrl = window.URL.createObjectURL(blob);\n            resolve(this.fileUrl);\n          }, \"image/png\");\n        });\n      }\n\n    render(){\n        const { crop, croppedImageUrl, src } = this.state;\n\n        return (\n            <div className=\"CropComponent\">\n                <div>\n                <input type=\"file\" onChange={this.onSelectFile} />\n                </div>\n                {src && (\n                <ReactCrop\n                    src={src}\n                    crop={crop}\n                    onImageLoaded={this.onImageLoaded}\n                    onComplete={this.onCropComplete}\n                    onChange={this.onCropChange}\n                />\n                )}\n                <br/>\n                {croppedImageUrl && (\n                <img alt=\"Crop\" style={{ maxWidth: \"100%\" }} src={croppedImageUrl} />\n                )}\n            </div>\n        )\n    }\n}\n\nexport default FormLogoImageCrop"]},"metadata":{},"sourceType":"module"}